"Inversion of control (IOC)" is a design principle where the control of object creation and
lifecycle management is transferred from Application code to the external container or framework.

"Dependency Injection (DI)" is a design principle where the dependencies of the program are
provided externally rather than being created within the class itself.
DI is used to achieve Loose Coupling between classes.

- Construction injection: Dependencies are provided to the classes using constructors.
    Constructors are provided as arguments. This ensures that dependencies are available when the object is created.



BEANS -
objects that are managed by the frameworks are "Beans", done through configuring file in package.

- Bean definition:
It includes configuration metadata that the container needs to know to create and manager beans.
- Bean configuration:
Definition of beans can be provided in many ways: XML configuration files, annotations and java-based configurations.
In configuration using XML file, the beans are defined within the <bean> tags with attributes specifying class, properties and dependencies.
Annotations include: @Component, @Service, @Repository, etc. these are picked by Spring and managed as beans.

LIFECYCLE OF BEAN:
Instantiation -> setting up bean properties -> Initialization -> Ready for use -> Destructed.


"Spring Containerization" is the process of keeping multiple objects within 1 container,
which is based on the configuration file definition of the classes to be managed.
Types:-
1. Application Context - Mostly used.
2. BeanFactory - Provides basic support for dependency injection, simplest.

Dependencies to add in 'pom.xml' file-
-> Maven Repository: 1. Spring-Core, 2. Spring-Context


"Autowiring" is to automatically resolve and inject dependencies between beans without requiring any explicit explanation in XML configuration.
For "Autowiring" two classes are required where one is dependent on the other.
Autowiring can be done in 3 ways:
- TYPE (the object type, ie. Specifications of a car)
- NAME (bean id)
- CONSTRUCTOR

"Annotations" - these are the ways of adding metadata to the spring code.
@Override - above the method way of telling something to the Java compiler.
@Component - marks java class as bean / or a manage component.
@Autowired - Spring will autowire dependency and the type of dependency on its declaration in xml.
@Qualifier - when we have multiple matching types, qualifier helps with 'which bean should be matched where while calling autowired annotation.'
@Value - Used to inject property values in our beans.
@Repository - Used to define the data repository (specialized version of components annotation).
@Service - indicates that this particular class is providing business services.
@Controller - Used to create web controllers, they handle http request.
@RequestMapping
@SpringBootApplication

------

Components & componentScan :
Component refers to a Java class which is managed by the Spring IoC container (manages the spring beans). These are the building blocks.
It is in a way a bean only - it is just designed to be auto-detected and configured from class path scanning. "We don't have to manually define this in the xml file as we had to, with the beans."
Defining components:
- using XML =>  <bean id = "myComponent" class = "com.example.components"/>

- using Annotations =>
import org.springframework.stereotype.Component;

@Component // this marks the class as Spring annotation
public class Component{
// implementation of class
}

:: Component scanning is a feature that automatically detects and registers beans from predefined package paths.


Autowired + Component - finds us the components which are autowired and their relation (or one's dependency on other).



COMPONENTS OF SPRING-BOOT

- Spring boot starters
- Auto configuration
- Spring boot actuators
- Embedded Servers
- Spring boot DevTools


Layers of Spring boot's tiers:
-> Presentation Layer - controller classes exist here (they accept the request from users, validates the inputs, and passes it to the service layer.)
-> Service Layer - holds the business logic. It does evaluation, decision making, processing of data is done here. Acts as the communicator between Presentation and Data access layer.
-> Data access layer - all the repository classes lie here (retrieve, save, etc.)


BROWSER = CONTROLLER = SERVICE = REPOSITORY = DATABASE



DEPENDENCIES IN SPRING BOOT
- These are the external libraries which a program would need to run Springboot applications.
Maven - It is a buld system which is used to manage dependencies.


@RestController - mandatory if we are to create a rest API. It is a combination of Controller and Response Body, at class level it makes it a bean and help executing the controller function.
(Bean is an object that is managed by the Spring.)

@SpringbootAutoConfiguration - works on connecting with the local host and others on its own and works accordingly, as required.
dispatcherServelet - Routes incoming requests to the appropriate controller methods.
- application.properties is used for configuration the customization of properties in Spring boot which we have got from xml properties. Specification is in fomr of "Key-value" pairs.

-- properties for the "application.properties" in a spring boot package.
spring.application.name=firstWork
server.port = 9090

#these below properties enable us to configure a data source connection. But these can be overwritten by command line arguments.

spring.datasource.url = jdbc:mysql://localhost/test
spring.datasource.username = root
spring.datasource.password = secret

# update is used to automatically update the details of the database into this application using the below command.
spring.jpa.hibernate.ddl-auto = update

--
Passing dynamic path variable into a URL - basically, the result changes as per the input that is there in the url of the website.
@GetMapping ("/hello/{ValueHolder}")
and then in the class declaring - we add the following:
"public Responses helloParam (@PathVariable String ValueHolder)"

Also, in @PathVariable, we may have two fixed paths and in between them, we can have a variable path.
eg:
@GetMapping ("/hello/{VariableHolder}/show")

There has to be a thoroughly thought through process about the end points of the API, the calls. And they have to be discussed and planned beforehand for better working between the front and the backend.

Model represents the category.


Different generation types in @GenerationType in JPA in Spring boot:
- Auto
- Identity
- Sequence
- Table
- None


LOMBOK :
It reduces the amount of repetitive code that you have to write. It is a Java library.
@Getter / @Setter
@NoArgsConstructor
@Data
@Value
@NonNull
@Builder
@Cleanup
